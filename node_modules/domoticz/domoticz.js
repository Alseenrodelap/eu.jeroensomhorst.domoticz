'use strict';
const http = require('http');
const Homey = require('homey');

const defaultPort = 8080;
const defaultPassword = '';

const deviceListPath = '/json.htm?type=devices&used=true';
const deviceEntryPath = '/json.htm?type=devices&rid={0}';

class Domoticz{

    constructor(uname,password,host,port){
        console.log("New Domoticz instance");
        this.uname = uname || '';
        this.password = password || defaultPassword;
        this.port = port || defaultPort;
        this.host = host;

        this.authToken = new Buffer(this.uname+":"+this.password).toString('base64');
        this.authHeader = 'Basic '+this.authToken;
    }

    // load domoticz from homey settings
    static fromSettings(){
        console.log("Retrieve connector from settings");
        let settings = Homey.ManagerSettings.get('domotics_config');
        if(settings) {
            return new Domoticz(settings.username, settings.password, settings.host, settings.port);
        }
        return null;
    }
    // get an 'unique' prefix to be used in the drivers
    getHostString(){
        return this.host+":"+this.port;
    }

    updateDevice(type,idx,command,passcode){
        let path = "/json.htm?type=command";
        path += "&param="+type;
        path += "&idx="+idx;

        switch(type){
            case 'setsetpoint':
                path += "&setpoint="+command;
                break;
            case 'switchlight':
                path += "&switchcmd="+command;
                break;
        }

        if(passcode){
            path += "&passcode="+passcode;
        }

        return this._makeHttpRequest(path).then((data)=>{
                let body = JSON.parse(data.body);
                return (body.status === 'OK');
            }).catch((error)=>{
                Homey.app.doLog("Error while updating device");
                Homey.app.doError(error);
                return false;
            });


    }

    async getDeviceData(idx){
        let data;
        let url;
        if(typeof(idx) == 'undefined' || idx === null){
            url  = deviceListPath;
        }else{
            console.log("get device data for "+idx);
            url = deviceEntryPath.replace("{0}",idx);
        }
        data = await this._makeHttpRequest(url);
        if(data.body.status === 'OK'){

            return data.body.result;
        }
        return null;
    }

    // retrieve the first device of the given type
    async findDevice(type,subtype){
        let data = await this._makeHttpRequest(deviceListPath);
        if(data.body.status === 'OK' ){
            return data.body.result;
        }
        return null;
    }

    async doLogin(){
        let data = await this._makeHttpRequest(deviceListPath);
        return (data.body.status === 'OK');
    }


    _makeHttpRequest(path){
        return new Promise((resolve,reject)=>{
            let req  = http.get({
                host: this.host,
                port: this.port,
                path: path,
                headers: {
                  'Content-length': 0,
                  'Authorization': this.authHeader
                },
            },(res)=>{
                let requestData = "";

                res.on('data',(chunk)=>{
                    requestData += chunk;
                });

                res.on('end',()=>{
                    resolve({
                        "body":  JSON.parse(requestData)
                    });
                });

                req.on('error',(err)=>{
                    Homey.app.doLog("Error while connecting to domoticz");
                    Homey.app.doLog(err);
                    reject(err);
                });
            }).on('error',(e)=>{
                Homey.app.doLog('Error!!');
                reject(e);
            });
        });
    }

}

module.exports = Domoticz;