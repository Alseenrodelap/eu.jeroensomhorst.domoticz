'use strict';
const http = require('http');
const Homey = require('homey');

const defaultPort = 8080;
const defaultPassword = '';

const deviceListPath = '/json.htm?type=devices';


class Domoticz{

    constructor(uname,password,host,port){
        this.uname = uname || '';
        this.password = password || this.defaultPassword;
        this.port = port || this.defaultPort;
        this.host = host;
        
    }

    // load domoticz from homey settings
    fromSettings(){

        let settings = Homey.ManagerSettings.get('domotics_config');
        if(settings) {
            return new Domoticz(settings.username, settings.password, settings.host, settings.port);
        }
        return null;
    }
    // get an 'unique' prefix to be used in the drivers
    getHostString(){
        return this.host+":"+this.port;
    }

    updateDevice(type,idx,command,passcode){
        let path = "/json.htm?type=command";
        path += "&param="+type;
        path += "&idx="+idx;
        path += "&switchcmd="+command;
        if(passcode){
            path += "&passcode="+passcode;
        }
        console.log("Command url to execute: ");
        console.log(path);

        return new Promise((resolve,reject)=>{
            this._makeHttpRequest(path).then((data)=>{
                console.log("Update command result");
                console.log(data.body);
                let body = JSON.parse(data.body);
                if(body.status === 'OK'){
                    return resolve(true);
                }
            }).catch((error)=>{
                return reject(error);
            });
        });

    }

    // retrieve the first device of the given type
    findDevice(type,subtype,id){
        console.log("Start searching devices");

        let path = deviceListPath;
        if(id){
            let path = deviceListPath + "&rid="+id;
        }

        return new Promise((resolve,reject)=>{
            this._makeHttpRequest(deviceListPath).then(
                (data)=>{
                    let body = JSON.parse(data.body);
                    console.log("Found data in domoticz");

                    if(body.status === "OK"){

                        let i = 0; 
                        let needle = null;

                        if(type == null && subtype == null){

                            return resolve(body.result);
                        }

                        
                        throw Error('No device found!');
                        
                    }else{
                        console.error("Invalid status received from data");
                        throw Error('invalid state from domoticz');
                    }
                    
                }).catch((error)=>{
                    console.error('Error while connecting??');
                    this.authToken = null;
                    return reject(error);
                });
        });



        
    }

    doLogin(){
        console.log("Start logging into system");

        return new Promise((resolve,reject)=>{
            this._makeHttpRequest(deviceListPath).then(
                (data)=>{
                    if(data.body.status =='OK'){
                        return resolve(true);
                    }else{
                        return reject(false);
                    }
                    
                }).catch((error)=>{
                    console.err('Error while logging into system??');
                    this.authToken = null;
                    return reject(error);
                });
        });
    }


    _makeHttpRequest(path){
        console.log("Start creating a request");
        this.authToken = new Buffer(this.uname+":"+this.password).toString('base64');
        console.log("username: "+this.username);
        console.log("password: "+this.password);
        console.log("Host: "+this.host);
        console.log("Port: "+this.port);
        console.log("path: "+path);
        console.log("Authtoken: "+this.authToken);

        return new Promise((resolve,reject)=>{
            const req  = http.get({
                host: this.host,
                port: this.port,
                path: path,
                headers: {
                  'Content-length': 0,
                  'Authorization': 'Basic '+this.authToken  
                },
            },(res)=>{

                var body = '';
                res.on('data',(chunk)=>{
                    console.log("retrieve data");
                    body+=chunk;
                });
                res.on('end',()=>{
                    console.log("Done retrieval of data");
                    res.body = body;
                    resolve(res);
                });
            }).on('error',(err)=>{
                console.log("Error while connecting to domoticz");
                console.log(err);
                reject(err);
            });

            
        });
    }

}

module.exports = Domoticz;