'use strict';
const http = require('http');
const Homey = require('homey');

const defaultPort = 8080;
const defaultPassword = '';

const deviceListPath = '/json.htm?type=devices';


class Domoticz{

    constructor(uname,password,host,port){
        console.log("New Domoticz wrapper object created");
        this.uname = uname || '';
        this.password = password || this.defaultPassword;
        this.port = port || this.defaultPort;
        this.host = host;
        
    }

    // load domoticz from homey settings
    fromSettings(){
        console.log("Retrieve new instance from homey settings");
        let settings = Homey.ManagerSettings.get('domotics_config');
        return new Domoticz(settings.username,settings.password,settings.host,settings.port);
    }
    // get an 'unique' prefix to be used in the drivers
    getHostString(){
        return this.host+":"+this.port;
    }

    // retrieve the first device of the given type
    findDevice(type,subtype,id){

        let path = deviceListPath;

        console.log("Start retrieve devices from domoticz");
        console.log("Type: "+type);
        console.log("Subtype: "+subtype);
        console.log("IDx :"+id);

        if(id){
            let path = deviceListPath + "&rid="+id;
        }

        this.authToken = new Buffer(this.uname+":"+this.password).toString('base64');

        return new Promise((resolve,reject)=>{
            this._makeHttpRequest(deviceListPath).then(
                (data)=>{
                    console.log("Data received");
                    let body = JSON.parse(data.body);
                    
                    if(body.status == "OK"){
                        console.log("Start scanning devices");  
                        let i = 0; 
                        let needle = null;
                        for(i = 0;i<body.result.length;i++){
                            console.log("Scanning device: "+i);
                            let device = body.result[i];
                            console.log(device.HardwareTypeVal);
                            console.log(device.SubType);
                            if(device.HardwareTypeVal == type && device.SubType == subtype){
                                console.log("Found a device corresponding the hardwaretype/subtype");
                                needle  = device;
                                if(id && id == device.idx){
                                    console.log("Return specific device");
                                   return resolve(device);
                                }else{
                                    console.log( "Return first device of given type");
                                   return resolve(device);
                                }
                            }
                        }
                        
                        throw Error('No device found!');
                        
                    }else{
                        console.error("Invalid status received from data");
                        throw Error('invalid state from domoticz');
                    }
                    
                }).catch((error)=>{
                    console.error('Error while connecting??');
                    this.authToken = null;
                    return reject(error);
                });
        });



        
    }

    doLogin(){
        console.log("Start logging into system");
        this.authToken = new Buffer(this.uname+":"+this.password).toString('base64');
        return new Promise((resolve,reject)=>{
            this._makeHttpRequest(deviceListPath).then(
                (data)=>{
                    if(data.body.status =='OK'){
                        return resolve(true);
                    }else{
                        return reject(false);
                    }
                    
                }).catch((error)=>{
                    console.err('Error while logging into system??');
                    this.authToken = null;
                    return reject(error);
                });
        });
    }


    _makeHttpRequest(path){
        console.log("Start creating a request");
        console.log("username: "+this.username);
        console.log("password: "+this.password);
        console.log("Host: "+this.host);
        console.log("Port: "+this.port);
        console.log("path: "+path);
        console.log("Authtoken: "+this.authToken);

        return new Promise((resolve,reject)=>{
            const req  = http.get({
                host: this.host,
                port: this.port,
                path: path,
                headers: {
                  'Content-length': 0,
                  'Authorization': 'Basic '+this.authToken  
                },
            },(res)=>{

                var body = '';
                res.on('data',(chunk)=>{
                    console.log("retrieve data");
                    body+=chunk;
                });
                res.on('end',()=>{
                    console.log("Done retrieval of data");
                    res.body = body;
                    resolve(res);
                });
            }).on('error',(err)=>{
                console.log("Error while connecting to domoticz");
                console.log(err);
                reject(err);
            });

            
        });
    }

}

module.exports = Domoticz;